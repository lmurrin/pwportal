generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  email              String           @unique
  name               String?
  role               Role             @default(USER)
  createdAt          DateTime         @default(now())
  phone              String?
  password           String?
  companyMemberships CompanyUser[]
  namedJobs          Job[]            @relation("NamedSurveyor")
  jobs               Job[]            @relation("CreatorJobs")
  profile            SurveyorProfile?
}

model CompanyUser {
  id        String      @id @default(cuid())
  userId    String
  companyId String?
  role      CompanyRole
  createdAt DateTime    @default(now())
  company   Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Company {
  id        String             @id @default(cuid())
  name      String
  createdAt DateTime           @default(now())
  users     CompanyUser[]
  templates DocumentTemplate[]
  jobs      Job[]              @relation("CompanyJobs")
}

model SurveyorProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  companyName  String
  addressLine1 String
  addressLine2 String?
  city         String
  postcode     String
  phone        String
  website      String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id              String              @id @default(cuid())
  userId          String
  title           String
  reference       String?
  description     String?
  status          JobStatus           @default(DRAFT)
  createdAt       DateTime            @default(now())
  bo_address1     String?
  bo_address2     String?
  bo_country      String?
  bo_county       String?
  bo_email        String?
  bo_name         String?
  bo_name_corr    String?
  bo_phone        String?
  bo_postcode     String?
  bo_town         String?
  work_address1   String?
  work_address2   String?
  work_country    String?
  work_county     String?
  work_postcode   String?
  work_town       String?
  companyId       String?
  namedSurveyorId String?
  ownership_type  OwnershipType       @default(FREEHOLDER)
  owner_plurality Plurality           @default(SINGLE)
  properties      AdjoiningProperty[]
  generatedDocs   GeneratedDocument[]
  company         Company?            @relation("CompanyJobs", fields: [companyId], references: [id], onDelete: Cascade)
  namedSurveyor   User?               @relation("NamedSurveyor", fields: [namedSurveyorId], references: [id])
  user            User                @relation("CreatorJobs", fields: [userId], references: [id], onDelete: Cascade)
  GeneratedNotice GeneratedNotice[]
}

model AdjoiningProperty {
  id              String        @id @default(cuid())
  jobId           String
  addressLine1    String?
  addressLine2    String?
  postcode        String?
  createdAt       DateTime      @default(now())
  country         String?
  county          String?
  owner_address1  String?
  owner_address2  String?
  owner_corr_name String?
  owner_country   String?
  owner_county    String?
  owner_name      String?
  owner_postcode  String?
  owner_town      String?
  ownership_type  OwnershipType @default(FREEHOLDER)
  town            String?
  owner_plurality Plurality     @default(SINGLE)

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  notices              GeneratedNotice[]
  surveyorAppointments SurveyorAppointment[]
}

model DocumentTemplate {
  id             String       @id @default(cuid())
  companyId      String
  name           String
  description    String?
  fileUrl        String
  key            String
  tagsUsed       String[]
  type           TemplateType
  noticeSubtype  String?
  systemTemplate Boolean      @default(false)
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())

  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  generatedDocs GeneratedDocument[]

  // Back-relations to GeneratedNotice (template used in notice)
  usedAsTemplateS1 GeneratedNotice[] @relation("TemplateS1")
  usedAsTemplateS3 GeneratedNotice[] @relation("TemplateS3")
  usedAsTemplateS6 GeneratedNotice[] @relation("TemplateS6")
}

model GeneratedDocument {
  id                String   @id @default(cuid())
  jobId             String
  templateId        String
  fileUrl           String
  createdAt         DateTime @default(now())
  generatedNoticeId String?

  job      Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  template DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  notice   GeneratedNotice? @relation(fields: [generatedNoticeId], references: [id])
}

model GeneratedNotice {
  id                  String   @id @default(cuid())
  jobId               String
  adjoiningPropertyId String
  ownerName           String
  startDate           DateTime
  responseDate        DateTime
  sections            String[]

  s1WallPosition String?
  s1Footings     String?
  s1Description  String?

  s3Paragraphs  String[]
  s3Description String?

  s6DistanceType String?
  s6Safeguard    String?
  s6Description  String?

  templateS1Id String?
  templateS3Id String?
  templateS6Id String?

  // Template relations
  templateS1 DocumentTemplate? @relation("TemplateS1", fields: [templateS1Id], references: [id])
  templateS3 DocumentTemplate? @relation("TemplateS3", fields: [templateS3Id], references: [id])
  templateS6 DocumentTemplate? @relation("TemplateS6", fields: [templateS6Id], references: [id])

  // Base relations
  job               Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  adjoiningProperty AdjoiningProperty   @relation(fields: [adjoiningPropertyId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  documents         GeneratedDocument[]
}

model SurveyorAppointment {
  id               String    @id @default(cuid())
  adjoiningOwnerId String
  surveyorId       String
  role             PartyRole
  createdAt        DateTime  @default(now())

  adjoiningOwner AdjoiningProperty @relation(fields: [adjoiningOwnerId], references: [id], onDelete: Cascade)
  surveyor       Surveyor          @relation(fields: [surveyorId], references: [id], onDelete: Cascade)
}

model Surveyor {
  id      String  @id @default(cuid())
  name    String
  company String?
  email   String?
  phone   String?
  address String?

  appointments SurveyorAppointment[] // ðŸ‘ˆ Back relation
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum NoticeStatus {
  DRAFT
  SENT
  RESPONDED
}

enum OwnershipType {
  FREEHOLDER
  LEASEHOLDER
  TENANT
  OTHER
}

enum CompanyRole {
  SURVEYOR
  ADMINISTRATOR
  SUPPORT
}

enum Plurality {
  SINGLE
  MULTIPLE
}

enum TemplateType {
  NOTICE
  LETTER
  AWARD
  NOTICE_COVER_LETTER
}

enum NoticeSubtype {
  S1
  S3
  S6
}

enum NoticeResponseType {
  CONSENT
  CONSENT_SOC
  DISSENT_TWO_SURVEYORS
  DISSENT_AGREED_SURVEYOR
  NO_RESPONSE
}

enum PartyRole {
  BUILDING_OWNER
  ADJOINING_OWNER
  AGREED_SURVEYOR
}
